#ifndef CHIP8_H
#define CHIP8_H

#include <stdint.h>

#define MEMORY_SIZE 4096
#define START_ADDRESS 0x200

#define SCREEN_WIDTH 64
#define SCREEN_HEIGHT 32

#define STACK_SIZE 16

#define KEYPAD_SIZE 16

uint8_t memory[MEMORY_SIZE];
uint8_t fontset[80] = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};
uint8_t display[SCREEN_WIDTH][SCREEN_HEIGHT];

uint16_t stack[STACK_SIZE];
uint8_t sp;

uint8_t delayTimer;
uint8_t soundTimer;

uint8_t keypad[KEYPAD_SIZE];

// CPU registers
uint16_t pc;  // program counter
uint16_t I;  // index register
uint8_t V[16];  // V0 to VF general purpose registers

void initializeMemory(void);
int loadROM(const char* filename);

void clearDisplay(void);
uint8_t drawSprite(uint8_t x, uint8_t y, uint8_t height, const uint8_t *sprite);

void pushStack(uint16_t value);
uint16_t popStack(void);

void updateTimers(void);
void executeCycle(void);

void setKeyDown(uint8_t key);
void setKeyUp(uint8_t key);
uint8_t isKeyPressed(uint8_t key);

#endif
